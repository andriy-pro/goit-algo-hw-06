from math import atan2, cos, radians, sin, sqrt

import matplotlib.pyplot as plt
import pandas as pd
from geopy.distance import geodesic
from haversine import haversine as haversine_lib


# Функція для обчислення відстані між двома точками за географічними координатами
def haversine_own(lat1, lon1, lat2, lon2):
    R = 6371.0  # Радіус Землі в кілометрах
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = (
        sin(dlat / 2) ** 2
        + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2) ** 2
    )
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c
    return distance


# Дані про станції
stations = {
    "Бурштинська ТЕС": (49.2066, 24.6255, 2300),
    "Добротвірська ТЕС": (50.0046, 24.2952, 700),
    "Криворізька ТЕС": (47.9142, 33.3233, 2820),
    "Курахівська ТЕС": (47.9780, 37.2827, 1500),
    "Ладижинська ТЕС": (48.6536, 29.2692, 1800),
    "Придніпровська ТЕС": (48.4472, 34.9943, 1765),
    "Південноукраїнська АЕС": (47.8148, 31.2065, 3000),
    "Рівненська АЕС": (51.3272, 25.0928, 2835),
    "Трипільська ТЕС": (50.1023, 30.7673, 1800),
    "Харківська ТЕЦ-5": (50.0056, 36.2292, 540),
    "Хмельницька АЕС": (50.3016, 26.6419, 2000),
}

# Всі можливі ребра (використовується для тестування)
edges = [
    ("Бурштинська ТЕС", "Добротвірська ТЕС"),
    ("Бурштинська ТЕС", "Криворізька ТЕС"),
    ("Бурштинська ТЕС", "Курахівська ТЕС"),
    ("Бурштинська ТЕС", "Ладижинська ТЕС"),
    ("Бурштинська ТЕС", "Придніпровська ТЕС"),
    ("Бурштинська ТЕС", "Південноукраїнська АЕС"),
    ("Бурштинська ТЕС", "Рівненська АЕС"),
    ("Бурштинська ТЕС", "Трипільська ТЕС"),
    ("Бурштинська ТЕС", "Харківська ТЕЦ-5"),
    ("Бурштинська ТЕС", "Хмельницька АЕС"),
    ("Добротвірська ТЕС", "Криворізька ТЕС"),
    ("Добротвірська ТЕС", "Курахівська ТЕС"),
    ("Добротвірська ТЕС", "Ладижинська ТЕС"),
    ("Добротвірська ТЕС", "Придніпровська ТЕС"),
    ("Добротвірська ТЕС", "Південноукраїнська АЕС"),
    ("Добротвірська ТЕС", "Рівненська АЕС"),
    ("Добротвірська ТЕС", "Трипільська ТЕС"),
    ("Добротвірська ТЕС", "Харківська ТЕЦ-5"),
    ("Добротвірська ТЕС", "Хмельницька АЕС"),
    ("Криворізька ТЕС", "Курахівська ТЕС"),
    ("Криворізька ТЕС", "Ладижинська ТЕС"),
    ("Криворізька ТЕС", "Придніпровська ТЕС"),
    ("Криворізька ТЕС", "Південноукраїнська АЕС"),
    ("Криворізька ТЕС", "Рівненська АЕС"),
    ("Криворізька ТЕС", "Трипільська ТЕС"),
    ("Криворізька ТЕС", "Харківська ТЕЦ-5"),
    ("Криворізька ТЕС", "Хмельницька АЕС"),
    ("Курахівська ТЕС", "Ладижинська ТЕС"),
    ("Курахівська ТЕС", "Придніпровська ТЕС"),
    ("Курахівська ТЕС", "Південноукраїнська АЕС"),
    ("Курахівська ТЕС", "Рівненська АЕС"),
    ("Курахівська ТЕС", "Трипільська ТЕС"),
    ("Курахівська ТЕС", "Харківська ТЕЦ-5"),
    ("Курахівська ТЕС", "Хмельницька АЕС"),
    ("Ладижинська ТЕС", "Придніпровська ТЕС"),
    ("Ладижинська ТЕС", "Південноукраїнська АЕС"),
    ("Ладижинська ТЕС", "Рівненська АЕС"),
    ("Ладижинська ТЕС", "Трипільська ТЕС"),
    ("Ладижинська ТЕС", "Харківська ТЕЦ-5"),
    ("Ладижинська ТЕС", "Хмельницька АЕС"),
    ("Придніпровська ТЕС", "Південноукраїнська АЕС"),
    ("Придніпровська ТЕС", "Рівненська АЕС"),
    ("Придніпровська ТЕС", "Трипільська ТЕС"),
    ("Придніпровська ТЕС", "Харківська ТЕЦ-5"),
    ("Придніпровська ТЕС", "Хмельницька АЕС"),
    ("Південноукраїнська АЕС", "Рівненська АЕС"),
    ("Південноукраїнська АЕС", "Трипільська ТЕС"),
    ("Південноукраїнська АЕС", "Харківська ТЕЦ-5"),
    ("Південноукраїнська АЕС", "Хмельницька АЕС"),
    ("Рівненська АЕС", "Трипільська ТЕС"),
    ("Рівненська АЕС", "Харківська ТЕЦ-5"),
    ("Рівненська АЕС", "Хмельницька АЕС"),
    ("Трипільська ТЕС", "Харківська ТЕЦ-5"),
    ("Трипільська ТЕС", "Хмельницька АЕС"),
    ("Харківська ТЕЦ-5", "Хмельницька АЕС"),
]

# Обчислення відстаней між станціями за трьома методами
results = []

for edge in edges:
    station1, station2 = edge
    lat1, lon1, _ = stations[station1]
    lat2, lon2, _ = stations[station2]
    distance_own = haversine_own(lat1, lon1, lat2, lon2)
    distance_lib = haversine_lib((lat1, lon1), (lat2, lon2))
    distance_geopy = geodesic((lat1, lon1), (lat2, lon2)).km
    results.append((station1, station2, distance_own, distance_lib, distance_geopy))

# Створення DataFrame для зручності аналізу
df = pd.DataFrame(
    results,
    columns=["Станція 1", "Станція 2", "Власна реалізація", "'haversine'", "'geopy'"],
)

# Додавання нумерації пар станцій
df.index = df.index + 1
df.index.name = "Пара"

# Обчислення відхилень у метрах та відсотках
df["Відхилення (м)"] = abs(df["Власна реалізація"] - df["'geopy'"]) * 1000
df["Відхилення (%)"] = (df["Відхилення (м)"] / (df["'geopy'"] * 1000)) * 100
max_deviation = df["Відхилення (м)"].max()
max_deviation_pair = df.loc[df["Відхилення (м)"].idxmax(), ["Станція 1", "Станція 2"]]

# Виведення результатів у таблиці
pd.set_option("display.max_rows", None)  # Виведення всіх рядків
print(df.to_string())
print(
    f"\nНайбільше відхилення: {max_deviation:.2f} метрів між станціями {max_deviation_pair['Станція 1']} і {max_deviation_pair['Станція 2']}"
)

# Побудова графіку для порівняння
plt.figure(figsize=(10, 6))
plt.plot(df.index, df["Власна реалізація"], label="Власна реалізація", marker="s")
plt.plot(df.index, df["'haversine'"], label="Бібліотека haversine", marker="o")
plt.plot(df.index, df["'geopy'"], label="Бібліотека geopy", marker="x")
plt.xlabel("Пари станцій")
plt.ylabel("Відстань (км)")
plt.title("Порівняння відстаней між станціями за трьома методами")
plt.legend()
plt.grid()
plt.show()

# Побудова графіку для відхилень у метрах
plt.figure(figsize=(10, 6))
plt.bar(df.index, df["Відхилення (м)"])
plt.xlabel("Пари станцій")
plt.ylabel("Відхилення (м)")
plt.title(
    "Відхилення між відстанями за власною реалізацією та бібліотекою geopy (в метрах)"
)
plt.grid()
plt.show()

# Побудова графіку для відхилень у відсотках
plt.figure(figsize=(10, 6))
plt.bar(df.index, df["Відхилення (%)"])
plt.xlabel("Пари станцій")
plt.ylabel("Відхилення (%)")
plt.title(
    "Відхилення між відстанями за власною реалізацією та бібліотекою geopy (у відсотках)"
)
plt.grid()
plt.show()
